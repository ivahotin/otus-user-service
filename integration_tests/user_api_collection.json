{
	"info": {
		"_postman_id": "22746d6d-271a-4e5b-a3fd-05f416d72eaf",
		"name": "User API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Should return http 404 for non-existing user id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return 404 status if user id isn't in the DB\", function() {",
							"    pm.response.to.have.status(404);",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"userId\", 10000000)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/v1/user/{{userId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should create user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return user by id\", function() {",
							"    pm.response.to.have.status(200);",
							"    let jsonData = pm.response.json();",
							"    pm.collectionVariables.set(\"BobId\", jsonData.id);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"johndoe589\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"bestjohn@doe.com\",\n    \"phone\": \"+71002003040\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/v1/user/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Should get user by its id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return 404 status if user id isn't in the DB\", function() {",
							"    pm.response.to.have.status(200);",
							"    const jsonData = pm.response.json();",
							"",
							"    const id = parseInt(pm.collectionVariables.get(\"BobId\"))",
							"    pm.expect(jsonData.id).to.eq(id);",
							"    pm.expect(jsonData.username).to.eq(\"johndoe589\")",
							"    pm.expect(jsonData.firstName).to.eq(\"John\")",
							"    pm.expect(jsonData.lastName).to.eq(\"Doe\")",
							"    pm.expect(jsonData.email).to.eq(\"bestjohn@doe.com\")",
							"    pm.expect(jsonData.phone).to.eq(\"+71002003040\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/v1/user/{{BobId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						"{{BobId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Shouldn't create user if request body is invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return 400 status in case of invalid body\", function() {",
							"    pm.response.to.have.status(400);",
							"    const jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.code).to.eq(400);",
							"    pm.expect(jsonData.message).to.eq(\"Invalid body\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"bestjohn@doe.com\",\n    \"phone\": \"FAKE\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/v1/user/",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Should return 404 status if user doesn't exist",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"userId\", 10000000)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return status 404 if user doesn't exist\", function() {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/v1/user/{{userId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should update Bob's account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should update Bob's account\", function() {",
							"    pm.response.to.have.status(200);    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"bobuser\",\n    \"firstName\": \"Julie\",\n    \"lastName\": \"Doe\",\n    \"email\": \"bestjohn@doe.com\",\n    \"phone\": \"+71004242424\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/api/v1/user/{{BobId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						"{{BobId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should return updated Bob's account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return updated Bob's account\", function() {",
							"    pm.response.to.have.status(200)",
							"",
							"    const jsonData = pm.response.json();",
							"",
							"    const id = parseInt(pm.collectionVariables.get(\"BobId\"))",
							"    pm.expect(jsonData.id).to.eq(id);",
							"    pm.expect(jsonData.username).to.eq(\"bobuser\")",
							"    pm.expect(jsonData.firstName).to.eq(\"Julie\")",
							"    pm.expect(jsonData.lastName).to.eq(\"Doe\")",
							"    pm.expect(jsonData.email).to.eq(\"bestjohn@doe.com\")",
							"    pm.expect(jsonData.phone).to.eq(\"+71004242424\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/v1/user/{{BobId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						"{{BobId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should return 404 if updated user doesn't exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return 404 if updated user doesn't exist\", function() {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/v1/user/{{userId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Should delete Bob's account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should delete Bob's account\", function() {",
							"    pm.response.to.have.status(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/v1/user/{{BobId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						"{{BobId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Shouldn't return Bob's account after its deletion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Shouldn't return Bob's account after its deletion\", function() {",
							"    pm.response.to.have.status(404)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/api/v1/user/{{BobId}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						"{{BobId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost:8000"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "BobId",
			"value": ""
		}
	]
}