openapi: 3.0.0
info:
  contact:
    email: ivahotin@gmail.com
  title: Создание заказа
  version: 0.1.0
tags:
  - name: order
    description: Сервис заказов
  - name: billing
    description: Сервис биллинга
  - name: notification
    description: Сервис уведомлений
  - name: user
    description: Сервис пользователей
security:
  - cookieAuth: []
paths:
  /orders:
    post:
      summary: Cоздание заказа
      description: Создание заказа. После создание заказа отправляется письмо на email
      operationId: createOrder
      tags:
        - order
      requestBody:
        $ref: '#/components/requestBodies/Order'
      responses:
        '201':
          description: Создание заказа прошло успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '409':
          description: Недостаточно средств для создания заказа
  /payments/withdrawals:
    put:
      summary: Снятие суммы на со счета пользователя
      operationId: withdrawMoney
      tags:
        - billing
      parameters:
        - in: header
          name: Idempotency-Key
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        $ref: '#/components/requestBodies/Payment'
      responses:
        '201':
          description: Деньги успешно сняты со счета
        '409':
          description: Недостаточное количество средств
  /payments/replenishments:
    put:
      summary: Пополнение счета пользователя
      operationId: replenishMoney
      tags:
        - billing
      parameters:
        - in: header
          name: Idempotency-Key
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        $ref: '#/components/requestBodies/Payment'
      responses:
        '201':
          description: Деньги успешно зачислены на счет
  /notifications:
    put:
      summary: Отправка уведомления
      operationId: sendNotification
      tags:
        - notification
      parameters:
        - in: header
          name: Idempotency-Key
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        $ref: '#/components/requestBodies/Notification'
      responses:
        '201':
          description: Уведомление успешно создано
    get:
      summary: Получение уведомлений
      operationId: getUserNotification
      tags:
        - notification
      parameters:
        - in: query
          name: userId
          schema:
            type: string
            format: uuid
          description: Идентификатор пользователя
      responses:
        '200':
          description: Уведомления пользователя
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
  /users/{userId}:
    get:
      summary: Получение профиля пользователя
      operationId: getUserProfile
      tags:
        - user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: Профиль пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session_id
  schemas:
    Order:
      type: object
      properties:
        id: 
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        price:
          type: integer
          format: int64
      required:
        - userId
        - price
    Payment:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        amount:
          type: integer
          format: int64
      required:
        - userId
        - price
    User:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
      required:
        - userId
        - firstName
        - lastName
        - email
        - phone
    Notification:
      type: object
      properties:
        message:
          type: string
        userId:
          type: string
          format: uuid
  requestBodies:
    Order:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          example:
            sample-user:
              summary: Пример заказа
              value:
                userId: 'cf7b1894-a53c-4df6-8614-77d7926db59d'
                price: 100
      description: Order for user with price 100
      required: true
    Payment:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Payment'
          example:
            sample-payment:
              summary: Пример платежа
              value:
                userId: 'cf7b1894-a53c-4df6-8614-77d7926db59d'
                price: 100
    Notification:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Notification'
          example:
            sample-notification:
              summary: Пример уведомления
              value:
                message: 'Ваш заказ успешно cоздан'
                userId: 'cf7b1894-a53c-4df6-8614-77d7926db59d'